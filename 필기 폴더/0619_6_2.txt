{6_2_EditVideoOne}
watch컨트롤러와 마찬가지로 edit 컨트롤러도 똑같이 id랑 video 변수에 각각의 정보를 저장
해줬다 그리고 edit.pug 파일에 가서 form을 하나 만들어주자 form의 속성인 action은 좀 있다
배울것이다 자 인제 form 태그 안에 input 엘레먼트들을 넣어서 video title을 바꿀 수 있는
input 검색창과 save 버튼을 넣었다 자 인제 비디오를 이 페이지로 보내고 싶다 어칼까?
백엔드(컨트롤러)에서 무언갈 보내는 방법으론 일단 배운것은 res.render의 두번째 인자로 변수를
오브젝트형태로 넣어주는 것이다
이걸 input 엘레먼트에 써보자 input의 속성으로 value=video.title 을 넣어주는 것이다
그리고 창을 열어보면 Video Title 검색창에 이미 Third Video라는 값이 입력돼있는걸
볼 수 있다
자 우린 지금까지 예쁜 form을 만들었다 근데 문제는 save눌렀을때 변경한 title이 저장돼야 한다는
것이다. 즉 save를 눌렀을때 action이라는 속성이 작동을 해야한다 action은 save를 눌렀을때
이 데이터를 어디로 보낼것인지에 대한 url정보를 담고 있는 form 속성이다 근데 우리는 save를 눌렀을때
다른 url로 데이터를 보낼 것이 아니라 그냥 지금 있는 /video/1/edit에 머물면서 post만 하고
싶다 따라서 action 속성을 지우고 method="POST" 라는 속성을 쓸 것이다
자 이렇게 한 후 save를 눌러보면 Cannot POST /video/3/edit 이 뜨는 것을 알 수 있다 여기서 알 수
있듯이 우린 지금 우리가 있는 똑같은 url로 데이터를 보내고 있다 근데 우린 method로 컨트롤러 가져
올때 쓴 get이 아니라 POST를 쓰고 있다 만약 save 눌렀을때 /save-change 라는 url로 이동하고 싶다?
그러면 action="/save-changes" 속성 쓰면 된다 이럴 경우 save 눌렀을때 Cannot GET /save-changes
가 뜬다 즉 GET request를 써서 이동한 것이다
자 그럼 get request 와 post request의 차이점은 뭘까?
이 둘의 차이를 알려면 우선 input의 이름을 지어줘야 한다 input 안에 name="titlee" 속성을 
넣어주고 form 속성을 action="/save-changes' 로 바꾼 후 save 버튼 누르면 url창에 
/save-changes?titlee=First+Video 이렇게 뜸을 알 수 있다
즉 검색창에 입력한 값(여기선 First Video)가 url에 출력된다 이게 get method가 하는 일이다
form의 method 속성의 디폴트값은 method="GET"이다
그렇다면 get method를 쓰는 form은 언제 쓰는 것일까? 예를 들어 구글에서 뭔가를 검색하면
그 검색어가 주소창의 url에 포함돼있을 것이다 이렇게 검색할때 get을 사용한다
post는 언제 사용할까? 얘는 파일을 보내거나, database에 있는 값을 수정하는 뭔가를 보낼 때 
사용한다 또 로그인할때 id나 password를 보낼때도 post를 사용한다. get 쓰면 url에 흔적이 남기
때문 그렇다면 form(action="/save-changes", method="POST") 이렇게 action과 ㅁmethod="POST' 속성
같이 쓰면 어케 될까? 이렇게 한 후 save 버튼 누르면 /save-changes로 이동하는 건 똑같지만
url은 그냥 /save-changes 만 뜬다 검색한 값이 url에 포함되지 않는다
자 나는 새 route를 만들고 싶지 않으므로 action은 지우고 method="POST"만 남기겠다
주소창을 통해 /video/3/edit 페이지에 진입하는 것은 get이고 save눌러서 저장하는 것은
post인 것이다 인제 저 Cannot POST 에러를 해결해보자 브라우저에게 post에 대해 알려주는 것이다
방법은 간단하다 videoRouter.js에서 videoRouter.post("/:id(\\d+)/edit", postEdit) 
이렇게 post 메서드 추가하고 videoController에도 postEdit이라는 컨트롤러 만들면 된다
그리고 기존의 edit 컨트롤러는 getEdit 으로 바꿔서 구별을 명확히 할 것이다
getEdit은 edit form을 화면에 보여주는 애이고 postEdit은 변경사항을 저장해주는 녀석임을 이름만 봐도
알 수 있다 자 이렇게 post 메서드에 대한 컨트롤러도 만들었으니 다시 save 버튼을 눌러보자
아직 postEdit 컨트롤러는 비어있어서 클릭해도 아무 반응 없지만 콘솔창을 통해 save누를 때마다
POST 리퀘스트 받고 있음을 볼 수 있다 다음 장에서든 이 POST리퀘스트를 처리해볼 것이다 
그 전에 아직은 필요 없는 라우터인 deleteVideo와 upload를 지워서 코드를 최소한으로 만들었다
{videoController.js에서 getEdit 컨트롤러}
export const getEdit = (req, res) => {
  const { id } = req.params;
  const video = videos[id - 1];
  return res.render("edit", { pageTitle: `Editing: ${video.title}`, video });
};

{edit.pug}
extends base.pug

block content 
    h4 Change Title of video
    form(method="POST") 
        input(name="titleee", placeholder="Video Title", value=video.title, required)
        input(value="Save", type="submit")  

{6_3_EditVideoTwo}
전 영상에서 우린 method라는게 바로 form과 백엔드 사이의 정보 정송에 관한 방식이라는 것을
배웠다 복습하자면 get method를 쓰면 그 form에 있는 정보가 url에 들어가게 된다 즉 검색할때
쓰기 딱좋다 이런 메소드를 어떤걸 써야할지 헷갈릴때는 이걸 생각해보면 된다
지금 내가 입력한 이 데이터가 나의 database 상태를 수정할 것인가? 아니면 그냥 새로운 검색을
하기 위해 입력한 것인가? 전자일 경우 POST를 쓰고 후자일때 GET을 쓰면 된다
자 지금까지 짠 코드로는 save 버튼 눌렀을때 로딩만 무한대로 하고 response가 출력되지 않는다
왜냐! 우리가 postEdit 컨트롤러를 아직 안 채웠기 때문! 여기다가 인제 response 코드를 짜줘야
한다 
자 인제 getEdit 과 postEdit 컨트롤러는 get,post 메서드 뺴곤 다 똑같으므로
둘을 합쳐서 표기하겠다 아래처럼 하면 된다
videoRouter.route("/:id(\\d+)/edit").get(getEdit).post(postEdit);
이렇게 route를 따로 빼주고 get과 post를 둘다 넣어주면 한줄로 짧게 단축할 수 있다
자 인제 postEdit 컨트롤러에 res.redirect() 메서드를 써볼 것이다 redirect는 말 그대로
다시 기존페이지(여기선 watch페이지)로 돌아가는 메서드이다
자 이 메서드 안에는 돌아갈 url을 넣어주면 된다(여기선 /video/${id})
자 프로그램의 흐름을 다시 설명하자면 우리가 edit 페이지 진입하면 getEdit 컨트롤러가
req를 받고 respose로 비디오 title 수정할 수 있는 form을 render한다
title 수정하고 save 버튼 누르면 postEdit 컨트롤러가 req받고 res.redirect 실행해서
그 전 watch 페이지로 돌아가게 된다 
인제 form으로부터 입력받은 값을 얻어서 저장해보자 이 바꾼 타이틀 data를 어떻게  받을 수 있을까?
req.params가 id를 가져올 수 있는 것처럼 req.body 쓰면 검색창에 입력한 데이터 받을 수 있지 않을까?
아쉽게도 콘솔창에 이거 출력해보면 undefined 나온다. 아직 express는 form에서 데이터를 받는
법을 모르는 것이다. 따라서 뭔가 설정을 더 해줘야 한다
이 설정은 express.urlencoded(유알엘인코디드)로 할 수 있는데 epressjs에 들어가면 이 메서드에 대한 
설명을 찾아볼 수 있을것이다 이 메서드는 몇가지 속성들이 있는데 우린 그중 extended를 쓸 것이다
얘는 req.body에 있는 정보들을 보기 좋게 오브젝트로 갖춰주는 역할을 한다 자 이 설정은 미들웨어에서
해야하므로 sever.js에 가보자 이 미들웨어는 당연히 route 보다 전에 작성돼야 이 middleware가
form을 이해하고 그것들을 자바스크립트로 변형시켜줘서 우리가 사용할 수 있게 해준다 예전에 배웠다
자 인제 route 설정한거 이전 위치에 app.use(express.urlencoded({extended:true}))를 넣어주자
자 이 미들웨어는 무슨역할을 하냐면 너의 express application이 form의 value들을 이해할 수 있게
하고 그 값들을 우리가 쓸 수 있는 JS 형태로 변형시켜줄 것이다 자 인제
postEdit 컨트롤러에 console.log(req.body) 넣어서 실행시켜보자
자 form의 입력창에 This should show up on the console 입력하고 save 눌렀더니
콘솔창에 { title: 'This should show up on the console' } 이렇게 입력한 것이 오브젝트형태로
출력된 것을 볼 수 있다. 여기서 키가 title인 것은 우리가 input의 name 속성을 title로 줬기
때문에 그렇다 그럼 인제 id 변수에 req.params를 저장한것 처럼 이 req.body 오브젝트에서 입력값 
추출해서 변수에 저장해서 쓰면 된다 디스트럭쳐링 써서 해보자!
자 그리고 인제 드디어 수정된 title을 기존 데이터베이스에 업데이트 해보자
근데 예전에 es6 강의 들었을때 오브젝트를 수정할때 const video = videos[id - 1]; video.title=title;
이렇게 해서 기존 오브젝트의 아이템을 바꿀 순 없다
videos[id-1].title=title; 이렇게 해서 수정을 해줘야 한다 es6의 규칙이다
자 이렇게 하면 인제 video title 수정이 가능해진다
{server.js}
import express from "express";
import morgan from "morgan";
import global from "./routers/globalRouter";
import user from "./routers/userRouter";
import video from "./routers/videoRouter";

const PORT = 5000;

const app = express();

app.set("view engine", "pug");
app.set("views", process.cwd() + "/src/views");
const logger = morgan("dev");
app.use(logger);
app.use(express.urlencoded({ extended: true }));

app.use("/video", video);
app.use("/user", user);
app.use("/", global);

const handleListening = () =>
  console.log(`Server listening on port http://localhost:${PORT} 🎃`);

app.listen(PORT, handleListening);

{videoRouter.js}
import express from "express";
import {
  watch,
  getEdit,
  postEdit,
  deleteVideo,
  upload,
} from "../controllers/videoController";
const videoRouter = express.Router();

videoRouter.get("/:id(\\d+)", watch);

videoRouter.route("/:id(\\d+)/edit").get(getEdit).post(postEdit);

export default videoRouter;

{videoController.js 중 getEdit과 postEdit}
export const getEdit = (req, res) => {
  const { id } = req.params;
  const video = videos[id - 1];
  return res.render("edit", { pageTitle: `Editing: ${video.title}`, video });
};

export const postEdit = (req, res) => {
  const { id } = req.params;
  const { title } = req.body;
  // console.log(req.body);
  videos[id - 1].title = title;
  return res.redirect(`/video/${id}`);
};

{edit.pug}
extends base.pug

block content 
    h4 Change Title of video
    form(method="POST") 
        input(name="title", placeholder="Video Title", value=video.title, required)
        input(value="Save", type="submit")  