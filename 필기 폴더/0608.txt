{3_0}
후 인제 진짜 서버를 만들 시간이다 그 전에 폴더를 정리하기 위해 코드를 담고 있는
파일들은 모두 src 폴더에 넣어줄 것이다 이때 index.js도 src에 넣을 것인데 그러면
package.json의 script를 손봐야 한다(경로를 수정해줘야 하기 때문)
index.js를 src/index.js 로 바꿔주면 된다
후 그리고 js 파일의 이름이 꼭 index.js일 필요 없다 나는 server.js로 바꿀 것이다

인제 우리의 첫번쨰 express application을 만들어보자
우선 "express" 라는 패키지로부터(from) express를 import해줄 것이다
최신 nodeJS는 매우 똑똑해서 import express from "express"; 이렇게만
입력해줘도 알아서 node_modules 폴더에서 express 패키지를 찾아낸다
node_modules/express 이렇게 할 필요 없다
express를 사용하려면 먼저 express application을 만들어야 한다
app이라는 변수를 선언하고 express application을 만들어보자
const app = express();
express function을 사용하면 express application을 생성해준다
서버는 항상 켜져있는 가상의 컴퓨터이다 인터넷에 연결돼있는 컴퓨터이다
이 서버는 항상 request를 listening 하고 있다
검색창에 google.com을 치고 엔터 누르면 이게 request가 되는 것이다
서버는 계속 주목하고 있다 따라서 우리는 서버로 하여금 사람들이 뭔가를 request할 때까지
기다리게 해야한다 app.listen(port, callback) 이 이 역할을 수행한다
listen 함수는 콜백함수를 필요로 한다 (서버가 시작할때 작동하는 함수이다)
콜백을 하기 전에 서버에게 어떤 port를 listen 할 것인지 알려줘야 한다
port는 컴퓨터의 문 같은 것인데 컴터에 여러개 있다 어떤 port는 인터넷과 연결돼있다
port 뭐써야 할지 모르겠으면 그냥 높은 번호의 port를 써라 보통 높은 번호 port는 항상
열려있다 4000 써보자
그리고 callback 함수로는 handleListening 써서 콘솔창에는 글을 출력하도록 했다
이렇게 간단하게 서버를 만들 수 있다
이 서버는 port(항구로 생각하자) 4000을 listening 중이다
이 서버는 어디서 열어볼 수 있을까? 크롬창에 localhost:4000 을 입력해보자
error가 뜨지만 그래도 cannot get이 출력된 것을 알 수 있다
이 서버창은 npm run dev가 실행중일때, 즉 서버가 온라인일때 뜨게 된다
컨트롤 c 눌러서 nodemon 끈 상태에서 localhost 접속해보면 접속이 안됨을 알 수 있다
이때 서버는 오프라인 상태인 것이다
이렇게 npm run dev를 써서 서버를 껐다 킬 수 있다 인제 서버를 만들 수 있게 됐다

{3_1_GETRequest}
흠 서버창에 뜬 Cannot get / 의 의미는 뭘까?
일단 / 는 서버의 root 혹은 첫페이지를 의미한다
따라서 url창에 google.com을 입력하는 것이나 google.com/ 를 입력하는 것은 같은거다
get은 http method 이다 http는 뭘까? 얘는 우리가 서버와 소통하는 방법을 의미한다
서버가 서로 소통하는 방법이기도 하다 우리가 주소창에 주소 치고 엔터를 누르면 우리는
http request를 서버에 보내는 것이다. 엄밀히는 브라우저가 서버에 보내게 된다
get /은 말그대로 첫 페이지를 가져오라는 뜻이다 우리가 localhost 4000에 접속했을때 이 명령이
자동으로 실행되는 것이다 이거는 "웹사이트에게 너희 사이트좀 나(브라우저)에게 가져와 줘" 라고 쉽게
생각하면 된다 브라우저는 나를 대신해서 웹사이트를 requst하고 가져오는 역할을 담당한다
후 cannot get / 은 일단 이런뜻이다
이 문구가 떴다는 것은 someone이 첫페이지, 즉 홈페이지를 get하려 하고 있다는 뜻이다
시도는 해보고 있는 거다. 우리는 이 request에 답을 해줘야 한다

{3_2_GETRequestTwo}
인제 할 일들은 전부 express 서버를 만들고 난 후에 발생해야 하므로
const app = express(); 이후에 그리고 app.listen() 전에 코드를 짜야 한다
이 샌드위치 영역에 우리는 application 설정을 할 것이다
이렇게 해야 순서가 맞다.
1. 서버를 개설한다(express app 생성) -> 2.app에게 get request에 응답하는 법을 가르칠것이다(response)
-> 3. 준비가 완료되면 application은 listen하기 시작하고 외부에 개방된다
이 순서로 진행되는게 자명하다
request는 유저가 뭔가를 요청하거나, 보내거나, 너에게 무슨 행동을 하는 것을 의미한다
지금 상황은 브라우저가 서버에 get request를 한 상황이다 인제 그거에 대한 response를 해줘야 한다
아직 브라우저 창에 데이터를 get하는 걸 하진 않을 것이다
우린 일단 request 생기면 콘솔창에 텍스트가 출력되게 하는거 먼저 해볼 것이다
우선 app.get(route, callback) 함수에 대해 알아보자
app.get 함수는 어떤 route에 request가 발생하면 callback함수가 실행되게끔 하는 함수이다
우리는 지금 root페이지일때 반응을 원하므로 route는 "/"가 될 것이다
이렇게 코드 짠 후 실행해보면 root 페이지 들어갈 때마다 콘솔에 respone가 출력됨을 알 수 있다
그리고 root 페이지는 계속 로딩 중이고 cannot get / 는 더 이상 뜨지 않는다
브라우저가 계속 로딩중인 이유는 우리가 응답을 안 해줘서 기다리고 있는 것이다
물론 request 받고 console.log 했지만 그 외에는 아무것도 않했잔냐 response가 필요하다

{3_3_Responses}
인제 responses에 대해 배워보자  route를 다룰때는 바닐라 JS 할때 배웠던 addEventlistner
함수의 콜백함수가 event 인자를 가졌다는 가지는 것과 비슷한 맥락으로 공부를 하면 된다
route handler(여기선 handleHome)는 event 인자를 가지진 않지만 두개의 매우 섹시한 오브젝트를 
인자로 가진다 첫쨰는 request(req) 이고 두번째는 response(res) 오브젝트이다
이 두 인자는 express가 우리에게 무료로 제공하는 인자들이다. 즉, 만약 home(/)으로 get request
가 오면 express는 handleHome에다가 request 와 response 두 오브젝트를 인자로 넣어준다
자 그럼 인제 home에 get request 왔을때 콘솔창에 req 오브젝트를 출력해보자.
엄청 복잡하고 긴 오브젝트가 출력된다 브라우저가 서버에 request하는 정보가 담겨있다
우리가 배워볼 첫번째 함수는 res.end이다 이거는 response 기능 중에 하나로 request를 종료하는
함수이다 return res.end() 실행해보면 localhost 들어가자마자 로딩 끝나는 것을 볼 수 있다
res.send()는 브라우저 창에 괄호 안의 내용을 띄우는 함수이다
route를 하나 더 만들어보자 /login 페이지를 만들어서 res.send 써서 창에 login here를 
띄우도록 했다
express의 다양한 method와 properties를 보려면 https://expressjs.com/ 여기 가서
api reference 들어가 보라 설명이 잘 나와있다
res.send() 메서드는 텍스트 뿐만 아니라 html도 보낼 수 있고 json도 보낼 수 있다
reference를 보면 알겠지만 express는 매우 작은 패키지이므로 겁먹지 말자!
express는 4개의 오브젝트만으로 구성돼있는데 각각 app, req, res, router 이다
router는 handler로 URL들을 정돈하는 방법인데 나중에 배울 것이다
정리하자면 서버는 우리가 server.js에 만든 것을 의미한다 우리는 브라우저로부터
request를 받게 되고 그에 따른 response를 해줘야 한다 안 그럴 경우 브라우저는 response
받을때까지 로딩하다가 포기할 것이다