{6_12_OurFirstQueryTwo}
자 이렇게 Video.find(); 하게 되면 mongoose는 Video 모델을 database에서 불러올 것이다 
그리고 database가 response 하면(search term에 해당하는 video 다 찾으면)
 find 함수 안의 콜백함수를 실행시킬 것이다 그리고 몽구스는
저 콜백함수의 인자인 err와 videos의 값을 불러올 것이다 콜백함수는 handleSearch로 따로
만들어서 넣어주겠다 handleSearch 함수 안에 console.log("errors",error); 
console.log("videos", videos);출력되게 해보자아 그리고 home.pug 들어가보면 videos라는
어레이를 res.render로부터 받고 있으므로 에러 방지를 위해 pageTitles 옆에 videos: [] 라는
변수를 하나 더 만들어서 보내주겠다
이렇게 하고 / 들어가보면 비디오 아무것도 안뜨고 콘솔창에는 errors null videos [] 뜸을 
알 수 있다 내가 방금한 이 행위로 하여금 JS코드로 database와 아무런 에러 없이 통신이 가능
해졌음을 알 수 있었다 error null을 통해 에러 없었음을 알 수 있고 db에 아무 데이터도 없기 떄문에
아무것도 find 하지 못해 []만 출력됨을 알 수 있다 자 이렇게 한 후 Video.find(); 아래에
console.log("hello") 를 넣어보고 실행해보자 신기하게도 hello가 먼저 출력되고 error null이
출력된다 즉 Video.find는 로딩하는데 시간이 걸린다는 것이다
콘솔창에 출력되는 순서를 살펴보면 Connected to DB -> hello -> logger(얘는 리퀘스트 완료됐을때
즉 브라우저에 홈페이지 출력됐을때 출력됨) -> error null 순이다 즉 error null은 아주 약간의
videos를 찾는 시간이 필요하다는 사실을 알 수 있다 그 찾는 과정이 끝나야 콜백함수가 실행되므로
약간의 딜레이가 발생하는 것이다 그렇다면 res.render를 콜백함수 안에 넣어보자
(이렇게 해야 db에서 데이터를 완전히 찾은 후 페이지를 렌더할 수 있다)
이렇게 하면 이젠 database에서 search를 다 끝낸 후에 rendering이 시작되도록 만들 수 있다
자 콜백함수를 사용하면 이렇게 좀 지저분하게 비동기 작업을 할 수 있다 함수 안에 함수를 집어
넣고 해야돼서 좀 번거롭다 인제 async await을 배워보자
{videoController.js 중 home 컨트롤러}
export const home = (req, res) => {
  console.log("Start");
  Video.find({}, (error, videos) => {
    console.log("errors", error);
    console.log("videos", videos);
    console.log("db loading finished");
    return res.render("home", { pageTitle: "Home", videos: [] });
  });
  console.log("I finished first");
};

