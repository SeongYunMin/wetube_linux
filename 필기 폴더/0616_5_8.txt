{5_8_Iteration}
자 인제 새로운걸 배우기 위해 기존의 conditionals 은 다 없애겠다
iteration이 뭘까 iteration은 element 들의 list를 의미한다. 댓글들의 list일 수도 있고
비디오들의 리스트일 수도 있다 자 videoController.js 에 가보자 trending 컨트롤러는 조만간
엔젠가 video들이 들어가게 될 것이다 우리가 데이터베이스에서 가져올 것이다 지금은 공부를 위해
fake video 어레이를 선언해 볼 것이다 const videos = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];
이렇게 말이다 그리고 우리의 home template에 이 videos들을 보내줘야 하므로 render에 인자로
videos 어레이를 넣겠다 그리고 home 탬플릿으로 가보자 여기서 이 비디오들을 나열하고 싶은데
어카면 좋겠는가? 그냥 ul 아래에 each video in videos 이렇게 하면 된다 
이게 iteration 이다
여기서 video는 그냥 매개변수이다 그리고 그 아래 li=video 입력해서 매개변수의 값을 li에 
하나씩 넣어줄 수 있다 이렇게 어레이의 엘레먼트 하나하나를 li에 넣어줘서 나열할 수 있다
여기서 video는 그저 videos어레이 안의 each 아이템을 가리키는 변수일 뿐이므로 어떤 이름
와도 상관 없다 videos는 컨트롤러의 res.render에서 보내주는 어레이 명이랑 당연히 같아야 한다
근데 통상적으로 each 단수 in 복수  이 형태로 많이 쓰게 될 것이다
자, 근데 만약에 videos 어레이에 아이템이 없다면? 빈 어레이일때 반응하기 위해선 어떤 코드가
필요할까? pug의 힘이 여기서 또 나오는데 그냥 each video in videos 구문 아래에 else 쓰고
li Sorry. Nothing found 이거 넣어서 예외 처리해주면 된다
더 많은 종류의 iteration은 pug 사이트에서 찾아보면 된다
앞으로 화면에 댓글이나 비디오 다른 무엇이든 리스트를 보여주고 싶을때에는 iteration을 쓸 것이다
다음장에선 오브젝트로 구성된 어레이에 대해 iteration을 해볼 것이다
{videoController.js}
export const trending = (req, res) => {
  const videos = [];
  res.render("home", { pageTitle: "Home", videos });
};
export const search = (req, res) => res.send("Search");
export const see = (req, res) => res.render("watch", { pageTitle: "Watch" });
export const edit = (req, res) => res.render("edit", { pageTitle: "Edit" });

export const deleteVideo = (req, res) => res.send("Delete Video");
export const upload = (req, res) => res.send("Upload Video");

{home.pug}
extends base.pug

block content 
    h2 Welcome! Here you will see the trending video
    ul
        each video in videos
            li=video
        else 
            li Sorry. Nothing found W

{5_9_Mixins}
자 인제 videos 어레이의 아이템을 각각 오브젝트로 바꿔보았다 이럴 경우 만약 그냥
each video in videos; li video 해버리면 화면상에 제대로 출력이 안된다
이럴 경우 li video.title 이렇게 오브젝트 안의 string에 바로 접근해줘야 한다
이렇게 iteration으로 오브젝트또한 다룰 수 있다    
자 인제 mixin에 대해 배워볼텐데 mixin은 이전에 배웠던 partials와 같다 하지만
차이점은 얘는 partial이긴 한데 데이터를 받을 수 있는 partial을 의미한다
우리가 만든 partial인 footer.js는 단지 html의 조각일 뿐 데이터를 받지는 못한다
우린 그저 복붙을 하지 않기 위해 footer.js라는 partials만든 것이다
근데 만약에 우리가 반복해서 등장하는 html 블록이 필요한데 이 블록은 형태는 같지만
서로 다른 데이터를 가져와야 한다면 어떡할까? 이때 mixin이 필요하다
일단 videos 어레이의 오브젝트 아이템들을 더 구체화 했다 그리고 home.pug를 좀 수정해
보자 영화 제목 과 다른 영화 데이터들을 하나의 div 박스에 넣어서 출력했다
이 박스는 어디서든 재사용 할 수 있는 component로써 사용할 수 있다
extends base.pug
block content 
    h2 Welcome! Here you will see the trending video
    ul
        each video in videos
            div 
                h4=video.title
                ul
                    li #{video.rating}/5
                    li #{video.comments} comments.
                    li Posted #{video.createdAt}
                    li #{video.views} views.
예를 들어보자. 유튜브를 들어가보면 나열된 동영상들에는 하나도 빠짐없이 조회수와
제작 시기 등이 표시된다 이는 동영상 시청하는 페이지로 들어가도 다른 동영상 소개 배너에도
썸네일,조회수,제작시기등이 표시된다. 이 포맷은 유튜브에서 계속 재사용되는 
비디오 component인 것이다
따라서 기존의 방법대로라면 이 component가 필요할때마다 복붙하고 내용만 수정해서 써야한다
여기서 mixin이 필요하다 일단 views 디렉토리 아래에 mixins 폴더를 파고 그 안에
video.pug 파일을 만들겠다 그리고 그안에 mixin video(info) 라는 코드를 맨위에 작성해줬다
그리고 그 아래에 우리가 home 탬플릿에서 만들었던 video component를 고대로 복붙해주겠다
그리고 home 템플릿에서 each info in videos 아래에 +video(info) 를 넣어주겠다
즉, videos 안의 각각의 info에 대해서, video()라는 mixin을 호출해서 그 info 오브젝트를
mixins/video.pug로 보내서 처리하게 하는 것이다 이건 코드 보면 이해될 것이다
근데 우리가 footer partials를 불러올때는 include를 썼는데 mixin도 똑같이 코드 상단에
include mixins/video 입력하고 video mixin 사용시에는 +video() 이렇게 +를 붙여서 사용해주면
된다 방금 이렇게 했는데 에러가 났다 다 맞았는데 왜 났을까?
내가 바보같게도 mixin video(info) 다음에 div를 입력할때 들여쓰기를 안 했다
pug에서 들여쓰기는 매우 중요하다 이걸 꼭 명심하자
암튼 인제 이 mixin은 언제 어디서든 불러와서 쓸 수 있게 됐다
{home.pug}
extends base
include mixins/video

block content 
    h2 Welcome! Here you will see the trending video
    ul
        each info in videos
            +video(info)
        else 
            li Sorry. Nothing found 
{mixins/video.pug}
mixin video(info)
    div 
        h4=info.title
        ul
            li #{info.rating}/5
            li #{info.comments} comments.
            li Posted #{info.createdAt}
            li #{info.views} views.