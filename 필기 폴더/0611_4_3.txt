{4_3_Exports}
videoController 파일처럼 여러 변수를 export 하고 싶을 때는 어떻게 해야할까?
export default 는 하나의 변수 밖에 export 못하는데 말이다 이때 필요한게 그냥 export이다
videoController 파일에서 export 하고 싶은 변수 앞에다가 전부 export를 붙여보자
userController 안에도 변수 선언한거 앞에다가 export를 붙여주자
이렇게 하면 한 파일에서 여러 변수를 export 할 수 있다 그렇다면 이걸 import 할때는 어떻게
할까? 바로 {} 오브젝트를 써줘야 한다 import {join} from "파일 주소"; 이런식으로 말이다
흠 이게 바로 그냥 export 할때와 export default 할때와의 차이인데 export default한 변수를
import 할 떄는 전에 배웠던 것처럼 원하는 어떤이름으로 import가 가능하다 왜냐면 export default
는 한가지 변수 만 export 하기 때문이다. 반면 그냥 export는 여러 변수를 export 할 수 있으므로
이때는 import 할때 기존에 선언한 변수의 이름을 그대로 가져와줘야 한다 그리고 그 이름을
오브젝트 {} 로 감싸줘야 한다 그리고 그 오브젝트 안에 가져오고 싶은 변수를 다 입력해주면 된다
이렇게 변수를 가져와서 쓰는 것을 refer, 즉 참조라고 한다

{userController.js}
export const join = (req, res) => res.send("Join!");
export const edit = (req, res) => res.send("edit User Profile");
export const del = (req, res) => res.send("delete User Profile");

{userRouter.js}
import express from "express";
import { edit, del } from "../controllers/userController";
const userRouter = express.Router();

userRouter.get("/edit", edit);
userRouter.get("/delete", del);

export default userRouter;

{4_6_PlanningRoutes}
인제 url의 플랜을 짜보자고 유저 입장에서 생각해서 플랜을 짜보자
일단 기존에 README 파일에 만들었던 틀은 계속 유지할 것이다. 근데 그중
/video/watch -> /video/:id 할 것이다 id의 의미는 다음 동영상에서 더 자세히 팔테지만 id는
너가 틀고자 하는 영상의 id를 의미한다 그리고 /users/edit, /users/delete, users/logout 같은
url들은 나, 즉 로그인한 유저만이 접속 가능하도록 할 것이다
일단 아래 나열한 거 정도만 하고 나중에 댓글이나 좋아요 url을 추가 할 것이다
README 파일에 수정한 url들을 아래 나열해보겠다
{global}
/ -> home
/join -> Join
/login -> Login
/search -> Search

{users}
/users/:id -> See User
/users/logout -> Log Out
/users/edit -> Edit MY Profile
/users/delete -> Delete MY Profile

{videos}
/videos/:id -> See Video
/videos/:id/edit -> Edit Video
/videos/:id/delete -> Delete Video
/videos/upload -> Upload Video 

인제 이 url들을 각 라우터에 추가해보자 일단 글로벌 라우터의 경우 login, search를 추가해줘
야 하는데 이들의 컨트롤러는 각각 userController, videoController에 존재하는게 상식적이다
아 그리고 지금까지는 response로 그냥 텍스트를 보내는 res.send를 했는데 이후에는 드디어
각 페이지에 html을 렌더링하는 법을 배울 것이다
자 일단 우리의 라우터들에 위의 추가한 url들을 전부 넣어주자 여기 첨부할 코드는 userRouter
하나만 예시로 첨부하도록 하겠다 그리고 다음 장에서는 :id 에 대해서 알아보겠다 매우 강력한
녀석이라 알아둘 필요가 있다

{userRouter.js}
import express from "express";
import { logout, edit, remove, see } from "../controllers/userController";
const userRouter = express.Router();

userRouter.get("/logout", logout);
userRouter.get("/edit", edit);
userRouter.get("/remove", remove);
userRouter.get("/:id", see);

export default userRouter;

{userController.js}
export const join = (req, res) => res.send("Join!");
export const edit = (req, res) => res.send("edit User Profile");
export const remove = (req, res) => res.send("remove User Profile");
export const login = (req, res) => res.send("Login please");
export const logout = (req, res) => res.send("Log Out");
export const see = (req, res) => res.send("See Users");

{4_7_urlParametersOne}
이 장에서는 :id에서 id와 콜론의 역할에 대해 배울것이다 이 콜론은
parameter라고 한다 이건 url 안에 변수를 포함시킬 수 있게 해주는 애이다
https://nomadcoders.co/wetube/lectures/2661 이 강의 주소에서 마지막에 2661 이 숫자가
변수이다 이런 파라미터들이 없다면 우리는 페이지를 만들때 영상 각각마다 라우터를 새로
만들어야 할 것이다 긍까 만약 비디오 1,2,3,4,5 가 우리 프로젝트에 있다 치면
파라미터 없이는 /video/1, /video/2, /video/3, /video/4, /video/5 이렇게 5개의 url에 대해
get을 다해줘야 하는데 이는 매우 불편하고 코드 길어진다 그래서 파라미터가 필요한 것이다
url안에 변수가 들어가는걸 허용해준다 위 5개의 url을 그냥 /video/:id 이렇게 쓸 수 있다는 것
파라미터 앞에 : 콜론이 있는 이유는 express에게 이 :id가 변수라는 것을 알려주기 위함이다
자 인제 이걸 코드에서 어떻게 접근하는지 보여주기 위해 대표적으로 see 컨트롤러를 수정해볼
것이다 uuserController 파일에서 see 코드를 조금 수정해서 Watch video send하기 전에
req.params를 console.log 해보겠다(params는 parameter의 약자)
이렇게 한후 /video/123123 들어가보면 콘솔창에 {id: '123123'} 이 출력됨을 알 수 있다
즉 이 url주소의 id가 출력 됐다 즉 express는 이 url이 변수를 가지고 있음을 인지한다
인제 edit과 delete 에도 req.params를 넣어보자 이 req 오브젝트는 매우 유용하다
리퀘스트 할때의 정보를 가져올 수 있기 때문이다 명심히자! url에 변수를 집어넣을려면
콜론 : 를 만들고자하는 변수명 앞에 붙여야 한다
인제 컨트롤러 파일에서 console.log(req.params); 지우고 그냥 res.send 안에 req.params.id
써서 문자열로 화면에 내보내도록 코드를 수정했다
(req.params는 url에 있는 모든 parameter 다 불러오고 req.params.id 는 딱 id parameter만
불러온다)
아 그리고 중요한 점이 videoRouter 파일에서 videoRouter.get("/upload", upload); 은
app.get 들 중 가장 상단에 위치해야만 한다! 왜냐하면 만약 중간에 위치하였을경우
특히 videoRouter.get("/:id", see); 아래에 위치할 경우 만약 주소창에 /video/upload 입력
하면 express는 코드를 캐스케이드하게 읽어나가다가 videoRouter.get("/:id", see);이 코드
읽고나서 방금 유저가 보낸 /video/upload 리퀘스트에서 upload가 id 구나! 라고 해석을 해버린다
따라서 화면창에 Watch video #upload 이렇게 뜨게 된다 따라서 upload는 id포함하는 애들보다
무조건 위에 있어야 한다
자 인제 이걸 생각해보자. 만약 유저가 url에 /video/eeeeeee/edit 이라는 주소 입력하면
화면엔 뭐가 뜰까? edit video #eeeee 이게 뜰 것이다. 근데 우리는 비디오의 아이디로
숫자만 받고 싶다 자 express 한테 입력되는 url의 id 자리에는 숫자만 와야한다고 전달할순
없을까? 다음장에서 배워보자 긍까 id로 eeeee 들어오면 이건 id로 허용하지 않는 법 배워보자
{videoController.js}
export const trending = (req, res) => res.send("Trending Videos");
export const search = (req, res) => res.send("Search");
export const see = (req, res) => {
  res.send(`Watch video #${req.params.id}`);
};
export const edit = (req, res) => {
  res.send(`edit video #${req.params.id}`);
};
export const deleteVideo = (req, res) => {
  res.send(`delete video #${req.params.id}`);
};
export const upload = (req, res) => res.send("Upload Video");

{4_8_urlParametersTwo}
자 인제 우리는 전 강의에서 마지막에 가졌던 의문을 해소하기 위해 express의 정규식에 대해
배워볼 것이다 그 전에 express 라우팅에 대해 알아보자 이건 꽤 유용한 기능이다
이 express 라우팅은 expressjs사이트에서 확인해볼 수 있다
뭐냐면 app.get("/ab*cd",handler); 이런 app.get 있다했을때 저기 있는 *은 ab와 cd 사이에
어떤 것도 올 수 있다는 것을 의미한다 즉, /abxcd, /abRANDOMcd, /ab123cd 이런거 입력돼도
전부 handler가 실행된다는 것이다
app.get("/ab+cd",handler); 여기서 +는 그 전 낱말인 b가 몇개가 와도 상관없다는 뜻이다
/abbcd, //abbbbbcd 이런거 입력해도 다 handler 실행된다 
app.get("/ab?cd",handler); 여기서 ?는 전 낱말인 b가 optional, 즉 와도 되고 안와도 된다는
뜻이다
우리가 추후 만들 id들은 사실 이 express 라우팅쓸일 별로 없지만 그래도 알면 유용하므로
이걸 좀 써보도록 하겠다
자 인제 정규식에 대해 알아보겠다 정규식은 문자열로부터 특정 정보를 추출해내는 방법이다 
모든 언어에 이 정규식 존재하고 얘는 매우 유용하다 이거는 강의를 보고 이해하는게 좋겠다
일단 예를들어 아래와 같은 문자열에서 nicolas로 시작하는 단어만 추출하고 싶다고 하자
string: Hello my name is nicolas and im 50, my name is also nicolassso
regular expression: /(nicolas\w+)/g 
이렇게 하면 nicolas와 nicolassso 둘만 딱 추출할 수있다. 여기서 \w는 nicolas뒤에오는
any words를 의미하고 +는 단어 끝까지 다 가져오라는 뜻이다
그렇다면 string에서 숫자만 추출하고 싶다면?
string: /video/12
        /video/lalalala
regular expression: /(\d+)/g
이렇게 \d, 즉 숫자(digit)를 의미하는 저걸 쓰고 뒤에 +를 붙여주면 strig에서 숫자 12만
추출하게 된다 인제 이걸 videoRouter.js의 get메서드 안의 id자리에 넣어서 숫자만
받을 수 있게 해보자 근데 JS에서는 역슬래시(\)를 2개 쓴다 즉, \\d+ 를 넣어줘야한다
이렇게 말이다 videoRouter.get("/:id(\\d+)", see); 
이렇게 id로 숫자만 받을 수 있게 정규식을 붙여주면 또 좋은 점은 뭐냐면 /video/upload
를 아무 위치에나 둬도 된다는 것이다 upload는 숫자 아니므로 id로 취급되지 않기 때문
근데 추후 우리가 만들 프로젝트에선 이 정규식을 쓰진 않을 것이다
왜냐면 우리의 데이터베이스는 다른 id형태를 가지기 때문이다 아 그리고 그냥 /(\\d+)
를 써도 되는데 굳이 /:id(\\d+) 쓴 이유는 우리가 req.params.id를 쓰기 위해서이다

{5_0_returningHTML}
자 인제 HTML을 response로 return 하는 법을 배워보자 두가지 있는데 첫번쨰는 그냥 
res.send(); 안에 문자열로 HTML을 보내는 방법이 있다 근데 우리 HTML은 엄청 클 것이기
떄문에 이렇게 보내기에는 좀 빡세다 우린 뭔가 좀 다른게 필요하다 그게 바로
pug 이다!!

{5_1_ConfiguringPug}
pug는 템플릿 엔진이다 퍼그는 정말 쿨한데 일단 구글에서 퍼그를 찾아보자
퍼그 깃허브에 들어가보면 퍼그가 html을 쉽게 쓸 수 있게 도와주는 엔진임을 알 수 있다
npm i pug 해서 퍼그 다운받고 얘를 쓰기 위해 express에게 이제부터 쓸 뷰 엔진은 pug라고
알려줘야 한다 이건 expressjs 사이트의 app 메서드 항목에서 찾아볼 수 있다
 server.js로 가서 app.set을 써서 pug를 뷰엔진으로 쓸 수 있게 해보자
퍼그 쓰는법 정리하자면 첫쨰 퍼그를 install한다, 두번쨰 퍼그를 뷰 엔진으로 설정한다
셋째 퍼그 파일을 생성한다 이게 끝이다
express는 디폴트로 /views 폴더에서 뷰엔진 파일을 탐색한다 따라서 우린 views 폴더를 만들
어야한다 그리고 그 안에 home.pug 파일을 만들었다
퍼그 파일을 구성할때 규칙은 모든 것을 소문자로 작성하고, 속성이 있으면 괄호 안에 작성한다
그리고 모든 태그는 부모 속성보다 들여써야한다 2칸을 띄우거나 탭을 써서 말이다
이 규칙 써서 일단 home.pug 파일 구성했다 인제 이걸 import 해와야 한다
그건 내일 알아보도록 하자
{server.js}
const PORT = 4000;

const app = express();

app.set("view engine", "pug");
const logger = morgan("dev");
app.use(logger);

app.use("/video", video);
app.use("/user", user);
app.use("/", global);

const handleListening = () =>
  console.log(`Server listening on port http://localhost:${PORT} 🎃`);

{home.pug}
doctype html
html(lang="ko")
    head 
        title Wetube 
    body 
        h1 Welcome to Wetube 
        footer &copy: 2021 Wetube
        