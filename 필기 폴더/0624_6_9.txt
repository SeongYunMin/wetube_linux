{6_9_CRUDintroduction}
인제 mongodb 연결됐으므로 우린 데이터를 진짜 database에 만들 준비가 됐다!
자 우리 목표는 지금까지 fake database로 만든 페이지를 전부 real database로 바꾸는 것이다
이런 행위들을 우린 일반적으로 CRUD라고 한다 Create Read Update Delete 이 과정을 모두
구현해볼 것이다 이 CRUD 순서대로 프로젝트를 만들어갈 것이다 인제부터 조금 어려워질 것이다
우린 mongoose랑 친해질 필요가 있다 우린 우선 user를 다루는 법부터 배울것이다
자 시작하기 전에 우선 src/models라는 폴더를 만들겠다 그리고 그 안에 Video.js 파일 만들었다
model이 뭘까? 기억하겠지만 mongoose는 우리서버가 mongoDB 와 대화할 수 있게 해준다 이 대화를 위해
mongoose를 조금 도와줄 필요가 있다 mongoose에게 우리의 데이터가 어떻게 생겼는지 알려줄
필요가 있다 예를들어 비디오에 어떤 타이틀이 있고, 버튼은 어떻게 생겼고 이런걸 알려줘야 한다
이렇게 알려주고 나면 mongoose는 이 데이터를 CRUD 하는 것을 도와줄 것이다
우리가 원하는 것은 database가 CRUD 할떄 우릴 도와주는 것이다 이렇게 하기 위해선 database에게
우리 데이터가 어떻게 생겼는지 말해줘야한다 database는 오브젝트 내의 아이템들의 값들 자체를 알
필요는 없다 database가 알아야하는 것은 데이터가 어떻게 생겼는가 하는 것이다
긍까 오브젝트의 키들을 알아야한다는 것이다 예를들어 Video는 뭘 가지고 있을까?
creator를 갖고 있는가? 댓글을 갖고 있는가? 그 댓글은 숫자야 문자열이야? 타이틀은 갖고 있어?
이런 것들을 알려줘야 해서 우린 model을 필요로 한다
후 설명이 어려워 예로 설명하자면 우리 Video model에는 title이 있고 그건 문자열로 구성돼있어, 라는
식으로 말해주는 것이다 그렇게 하면 우리가 비디오를 생성할때마다 database는 우리가 title로
문자열 타입인 값을 보낼 것으로 기대하게 될 것이다 이렇게 database에 설명을 해줘야 한다
Video.js를 다루는 것은 다음장에서 하겠다
{6_10_VideoModel}
VideoModel을 사용하기 위해서 Video.js는 mongoose 를 import해와야 한다 그리고 인제 본격적으로
model을 만들기 전에 우린 model의 형태를 정의해줄 필요가 있다 그 형태를 우린 일반적으로
schema 라고 한다 const videoSchema = new mongoose.Schema({}); 이렇게 스키마 변수를 만들고
그 안에 비디오의 형식을 작성할 것이다 그 안에 비디오 내의 데이터가 가진 형식을 String, Date 등
으로 정의해주고 있다 이렇게 비디오 내의 데이터를 직접 입력하지 않고 형식만 입력하는 이유는
비디오의 데이터는 user가 직접 채울 것이기 때문이다 우리가 wetube 영상 데이터를 직접 만들어서
제공하진 않지 않겠는가? 아 그리고 title: String 이랑 title: {type: String} 은 같은 것이다
단축해서 썼을 뿐이다 자 인제 좀 더 다양한 종류의 데이터(views, rating 등)은 meta라는
항목에 다 넣을 것이다 meta는 여분이라는 뜻이다 meta 엘레먼트 안에 오브젝트 하나 만들고
그 안에 views, rating 등을 넣으면 된다 자 인제 model을 만들 것이다 Video 이라는 변수 선언하고
mongoose.model("모델 이름", 스키마); 이렇게 넣어주면 된다 그리고 만든 Video를
export default 하면 된다 (보통 모델 이름은 대문자로 시작한다) 
이 모델을 우리(server.js)가 쓰기 위해서 우리(server.js)가 import를 해야한다
자 인제 우리 모델을 직접 사용할 수 있는 단계까지 딱 한단계 남았다 그건 다음장에서 하겠다
정리하자면 먼저 우린 데이터의 형식을 스키마를 사용해서 정의해주고 그 다음에 model을 만드는
것이다 model은 두개의 인자를 가지는데 하나는 model의 이름이고 하나는 schema이다 그리고
나서 해당 model을 default로 export해주면 된다 이렇게 한 후 우리의 model을 모두가 알 수 있게
하기 위해 server.js에 db.js를 import해서 연결하고 그 연결이 성공적일때 Video를 import해오는
것이다 즉 db.js에서한 mongoose.connection의 성공으로 인해 db는 video model을 인식하게 되었다
이게 제일 중요한 개념이다
{models/Video.js}
import mongoose from "mongoose";

const videoSchema = new mongoose.Schema({
  title: String,
  description: String,
  createdAt: Date,
  hashtags: [{ type: String }],
  meta: {
    views: Number,
    rating: Number,
  },
});

const Video = mongoose.model("Video", videoSchema);
export default Video;

{server.js 중 import 부분}
import "./db";
import Video from "./models/Video";
import express from "express";
import morgan from "morgan";
import global from "./routers/globalRouter";
import user from "./routers/userRouter";
import video from "./routers/videoRouter";

{6_11_OurFirstQuery}
자 이렇게 모델에 대해서 알아봤다 이후에는 더 많은 model을 만들어서 import 할 것이다 따라서
server.js의 상단에 db model을 import하는 많은 코드가 생길텐데 사실 database는 server.js에
영향을 거의 끼치지 않는다 따라서 이 db와 model의 import는 따로 init.js라는 파일을 만들어서
관리할 수 있도록 하자 init은 initalize(초기화)의 약자이다 즉 이 init.js는 초기 설정에 관한
코드들을 품고 있는 파일이다 이 파일이 database와 Video를 import 해주고 우리의 application도
작동시킬 것이다 따라서 app.listen 관련 코드 또한 이 파일로 옮겨주자 그리고 PORT 변수 선언한
것도 당연히 옮겨주자. 자 그리고 init.js 에서도 app을 쓸 수 있도록 export default app을 해서
이 app 변수를 init.js로 보내주자
이렇게 server.js를 관련된 것들에 따라 분해한 이유는 server.js는 express 된 것들과 server의
configuration에 관련된 코드만 처리하기 위해 만든 파일이기 때문이다 자 이렇게 분리한 후
npm run dev 하면 nodemon은 이상하게도 아무 반응이 없다 그 이유는 지금 우리가 app.listen을
하고 있는 파일은 init.js인데 nodemon은 server.js를 관찰하고 있기 때문이다
따라서 package.json의 script 엘레먼트에 있는 nodemon의 관찰 경로를 init.js로 바꿔주자
자 인제 분리가 끝났다. server.js는 sever 설정 관련 것들을 담당하고 필요한 모든 것을 import하는
것은 init.js가 담당할 것이다
자 인제 database 내 Video에 접근하는 법에 대해 배워보자 일단 fake database를 지워주자
그리고 그 fake database 쓰인 코드들 다 지워주자 trending 컨트롤러는 이름을 home으로 바꿔주겠다  
자 인제 진짜 database를 video 컨트롤러로 가져와보자 우선 Video model을 import 해오자
그럼 인제 이 파일의 database와 이걸 연결해야하는데 그건 어떻게 할까 그건 mongoose docs를
보면 알 수 있다 자 많은 몽구스 메서드 중 find를 쓸 것인데 이걸 이해하려면 callback, promise
등 es6 복습이 필요하다 비동기에 대해서도 배워야 한다 callback은 어떤 이벤트가 발생하고난 
다음에 호출되는 함수를 의미한다
handler 들이 대표적인 callback 함수이다 얘네는 기본적으로 이벤트가 일어날때까지 기다리는 애들
이다 그리고 promise는 배워서 알겠지만 앞에 일이 끝날때까지 기다리는 걸 의미한다(복습요망)
Video.find() 의 경우에도 Video라는 외부의 파일을 가져오는 것이므로 로딩 시간이 걸리게 된다
이 로딩이 다 끝나고 다음 코드가 작동해야 에러 없이 작동 가능하다
자 기다리는 것을 할 수 있는 방법은 callback, promise 두개 인데 promise 배우기 전 callback
부터 작동 방식을 이해해보도록 하자
Video.find(찾는거,콜백함수); 이렇게 들어가게 되는데 첫번쨰 인자에는 우린 모든 형식의 비디오를
찾을 것이므로 그냥 {} 를 넣어주면 된다 여기서 {} 를 search terms 라고 하는데 이게 비어있으면
모든 형식을 다 찾는다는 것을 의미한다 그리고 뒤에 오는 콜백함수는 기본적으로 2개의 인자를 필요로한다
(err, docs) 이다 따라서 Video.find({}, (err, videos) => {}); 이렇게 코드 짜면 모든 형식의
video를 찾은 후 뒤의 콜백함수를 실행하게 된다 이 콜백함수는 다음장에서 채우도록 하겠다
{init.js}
import "./db";
import Video from "./models/Video";
import app from "./server";

const PORT = 5000;

const handleListening = () =>
  console.log(`✅ Server listening on port http://localhost:${PORT} 🎃`);

app.listen(PORT, handleListening);

{server.js}
import express from "express";
import morgan from "morgan";
import global from "./routers/globalRouter";
import user from "./routers/userRouter";
import video from "./routers/videoRouter";

const app = express();
const logger = morgan("dev");

app.set("view engine", "pug");
app.set("views", process.cwd() + "/src/views");
app.use(logger);
app.use(express.urlencoded({ extended: true }));
app.use("/video", video);
app.use("/user", user);
app.use("/", global);

export default app;

{videoController 중 상단부분과 home 컨트롤러}
import Video from "../models/Video";

export const Home = (req, res) => {
  Video.find({}, (err, videos) => {});
  res.render("home", { pageTitle: "Home" });
};