{5_1_ConfiguringPug}
자 인제 home.pug를 불러와보자 이때 필요한메서드가 바로 res.render("view"); 이다
이 메서드에서 "view"는 view파일 이름을 의미하며 우린 home.pug만 있으므로 "home" 
넣어줄 것이다 이 home.pug 파일은 홈페이지가 실행될때 rendering 돼야하므로 
videoController 에 있는 trending 컨트롤러에 넣어줄 것이다
아 그리고 이렇게 view 파일 렌더링 할때는 import를 따로 해주지 않는다 왜냐하면
express는 디폴트로 /views 폴더에서 해당 뷰 파일을 자동으로 가져오기 때문이다
자 인제 / 페이지에 접속해보자! 에러가 보란듯이 뜰 것이다 이에러는 앞으로 자주 볼것이니깐
왜 이 에러가 뜨는지 알아보자 에러를 잘 읽어보면 views 폴더가 있는 경로가 좀 이상하다
우리 views 폴더는 src 폴더 안에 있는데 express는 그냥 wetube 폴더안에서 views 폴더를
찾고 있다 따라서 우린 저 사이에 src 폴더를 넣어야 한다 expressjs 사이트에 들어가서
/views 부분을 찾아보면 express는 디폴트로 current working directory(cwd)에서 /views 폴더
를 찾는 다고 돼있다 console.log(process.cwd()); 써서 cwd 뭔지 출력해보면 wetube-reloaded
디렉토리임을 알 수 있다 따라서 에러가 발생한 것이다 이 cwd는 어떻게 정해지는 걸까?
이거는 어느 파일에서 노드js를 부르고 있는지, 어디서 서버가 기동하고 있는지에 의해 결정된다
어느 파일이 서버를 가동하고 nodeJS를 불러왔을까? 바로 package.json 이다 따라서 이 package
.json이 cwd가 되는 것이다. 다시말하자면 cwd는 nodeJS를 실행한 파일이 있는 directory를 의미
한다 자 그럼 어떻게 cwd를 /wetube/src 폴더로 바꿀 수 있을까? 다음 장에서 보자
{userController.js}
export const trending = (req, res) => res.render("home");
export const search = (req, res) => res.send("Search");
export const see = (req, res) => {
  res.send(`Watch video #${req.params.id}`);
};
export const edit = (req, res) => {
  res.send(`edit video #${req.params.id}`);
};
export const deleteVideo = (req, res) => {
  res.send(`delete video #${req.params.id}`);
};
export const upload = (req, res) => res.send("Upload Video");


{5_2_Partials}
첫번쨰로 할 수 있는 구린 해결책은 views 폴더를 src 폴더 바깥으로 뺴는 것이다
그러면 wetube/views 되므로 정상 작동할 것이다 근데 나는 이렇게 하기 싫다 나는 src폴더 
안에 views 넣고 싶다 또하나는 express setting 중 하나인 app.set("views",원하는 디렉토리) 
를 써서 세팅을 바꿔주는 거다 원하는 디렉토리 자리에 process.cwd() + "/src/views" 넣어주면
된다 실행해보자 오 인제 된다
자 인제 pug로 돌아가자 pug의 좋은점 중하나는 html을 깔끔하게 작성할 수 있다는 점이다 그러나
이게 최고 장점은 아니다 퍼그의 메인 장점은 반복을 할 필요가 없다는 것이다 인제
나머지 페이지들도 pug써서 rendering 해보자 일단 videoController.js의 see 컨트롤러를 건드릴
건데 res.render("watch"); 를 써서 pug 파일을 불러오자
watch.pug 파일에서 우리가 배워볼 것은 탬플릿 상에서 js를 바로 쓸 수 있는 방법이다
바로 #{javascript} 를 필요한 위치에 써주면 된다 여기선 footer에서 년도를 최신화하기 위해
이 방법을 써봤다 아근데 신기한 것은 자바스크립트 코드가 유저가 보기 전에 평범한 텍스트
(여기선 2021)로 변환돼서 출력된다는 것이다 이게 rendering이다. 이게 pug가 하는 일이다
pug는 모든걸 체크하고 JS를 실행한다 그리고 그 결과물을 유저에게 제공한다
따라서 브라우저 검사의 element 들어가서 html코드 봐도 JS 코드는 전혀 없고 2021이라는 결과
물만 존재하는 것을 알 수 있다 이걸 가능하게 해준게 pug이다
근데 아직도 좀 문제점이 남아있다. 만약에 우리가 footer를 수정할 일이 생긴다면?
지금까지 배운것만 사용한다면 우린 모-든 페이지의 footer를 일일이 다 수정해줘야한다 그래서
나는 오직 하나의 footer만 써서 만약 내가 그 footer를 바꾸면 나머지 모든 페이지들도 다
업데이트가 되는 환경을 만들고 싶다
이걸 하기 위해 배워볼 것이 Partial이다 이게 pug의 진짜 장점이다
/views 폴더 안에 /views/partials 폴더를 하나 만들겠다 그리고 그 안에 footer.pug라는 파일
만들겠다 그리고 그 파일안에 footer &copy: #{new Date().getFullYear()} Wetube 이 코드를
옮겨주겠다.
자 인제 이걸 home.pug, watch.pug에 include 해줘야하는데 어케할까? pug 사이트에서 include에
대해 배울 수 있다 include partials/footer 를 pug 파일 마지막에 붙여주는 것이다
와 이렇게 하니깐 똑같은 코드를 반복할 필요 없이 편하게 코드를 짤 수 있게 됐다
만약 두 페이지에 nav 바 같은게 동일하다면 이렇게 include 써서 반복 없이 코드를 짤 수
있을 것이다
이 partial 기능이 정말 pug를 돋보이게 하는 매우 좋은 기능이다
흠 방금 include 배웠는데 지금 드는 생각은 '아 이 include도 없애고 싶다 매 페이지마다
똑같이 include 쓰는거 빡친다' 라는 생각이다ㅋㅋ  또 드는 생각은
home.pug, watch.pug, edit.pug 셋다 h1 안의 텍스트만 조금 다르고 나머지는 완전히 동일한데
이걸 이렇게 반복해서 코드를 작성해야되는가이다 이걸 해결할 방법은 다음장에서 배우겠다
{videoController.js}
export const trending = (req, res) => res.render("home");
export const search = (req, res) => res.send("Search");
export const see = (req, res) => res.render("watch");
export const edit = (req, res) => res.render("edit");

export const deleteVideo = (req, res) => {
  res.send(`delete video #${req.params.id}`);
};
export const upload = (req, res) => res.send("Upload Video");

{home.pug}
doctype html
html(lang="ko")
    head 
        title Wetube 
    body 
        h1 Welcome to Wetube 
        include partials/footer

{partials/footer.pug}
footer &copy: #{new Date().getFullYear()} Wetube!


{5_3_ExtendingTemplates}
자 인제 전 장에서 해결하지 못했던 것을 해결해보자 우선 세 pug 파일 다 똑같은 structure로
구성돼있다 doctype, head, title, body, include partials/footer 다 똑같다
이 반복을 없애기 위해 우리가 배울 개념은 바로 inheritance(상속) 이다 inheritance는
일종의 html 레이아웃의 base를 만들어주는 역할을 한다
자 인제 /views 디렉토리에 base.pug 파일을 하나 만들고 기존에 만든 파일의 html을 그대로
복붙해서 가져오자 그리고 기존 세 파일의 내용은 다 지우고 extends base.pug 입력하자
우리가 할 것은 home,watch,edit이 base를 확장(extend)하게 하는 것이다
즉 extends의 의미는 베이스가 되는 파일을 가져다가 그대로 쓰는 것이다
근데 이렇게만 하고 창 열어보면 세 사이트 모두 base! 가 출력이 된다 인제 각기 다른
내용물을 집어넣어야 할 차례이다
이때 필요한게 block이라는 개념이다 블록은 템플릿의 박스같은 것이다 이 안에 내용물을 넣을
 수 있다 어떻게 블록을 만드느냐 바로 base.pug에서 h1 태그를 지우고 그 자리에
 block content를 입력해주면 된다 그리고 extend할 파일에 가서 block content 입력하고
 그 아래에 원하는 내용물을 넣으면 된다
 이렇게 하면 진짜 말그대로 content 부분만 짜주면 되고 기본 structure를 수정할때는
 base.pug에서 수정하면 다 적용된다 정말 sexy하다
 이 블록을 사용해서 title을 페이지마다 각각 적용될 수 있게 해봤다
 이렇게 inheritance와 extends 는 편한 것이다!! 다음 편에서는 좀 더 겹치는 것 줄여볼 것이다
 {base.pug}
 doctype html
html(lang="ko")
    head 
        block title
    body 
        block content
    include partials/footer

{home.pug}
extends base.pug

block title
    title home | Wetube

block content 
    h1 Welcome to Wetube